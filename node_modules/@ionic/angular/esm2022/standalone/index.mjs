export { IonBackButton } from './navigation/back-button';
export { IonModal } from './overlays/modal';
export { IonPopover } from './overlays/popover';
export { IonRouterOutlet } from './navigation/router-outlet';
export { IonRouterLink, IonRouterLinkWithHref } from './navigation/router-link-delegate';
export { IonTabs } from './navigation/tabs';
export { provideIonicAngular } from './providers/ionic-angular';
export { ActionSheetController } from './providers/action-sheet-controller';
export { AlertController } from './providers/alert-controller';
export { AnimationController } from './providers/animation-controller';
export { GestureController } from './providers/gesture-controller';
export { LoadingController } from './providers/loading-controller';
export { MenuController } from './providers/menu-controller';
export { ModalController } from './providers/modal-controller';
export { PickerController } from './providers/picker-controller';
export { PopoverController } from './providers/popover-controller';
export { ToastController } from './providers/toast-controller';
export { DomController, NavController, Config, Platform, NavParams, IonModalToken, IonicRouteStrategy, } from '@ionic/angular/common';
export { IonNav } from './navigation/nav';
export { IonCheckbox, IonDatetime, IonInput, IonInputOtp, IonIcon, IonRadioGroup, IonRange, IonSearchbar, IonSegment, IonSelect, IonTextarea, IonToggle, } from './directives';
export * from './directives/proxies';
export { 
// UTILS
createAnimation, createGesture, iosTransitionAnimation, mdTransitionAnimation, IonicSlides, getPlatforms, isPlatform, getTimeGivenProgression, IonicSafeString, } from '@ionic/core/components';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zdGFuZGFsb25lL3NyYy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDekQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQzVDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNoRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDN0QsT0FBTyxFQUFFLGFBQWEsRUFBRSxxQkFBcUIsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ3pGLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUM1QyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNoRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUM1RSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDL0QsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDdkUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDbkUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDbkUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQzdELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUNqRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNuRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDL0QsT0FBTyxFQUNMLGFBQWEsRUFDYixhQUFhLEVBQ2IsTUFBTSxFQUNOLFFBQVEsRUFDUixTQUFTLEVBQ1QsYUFBYSxFQUNiLGtCQUFrQixHQUtuQixNQUFNLHVCQUF1QixDQUFDO0FBQy9CLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUMxQyxPQUFPLEVBQ0wsV0FBVyxFQUNYLFdBQVcsRUFDWCxRQUFRLEVBQ1IsV0FBVyxFQUNYLE9BQU8sRUFDUCxhQUFhLEVBQ2IsUUFBUSxFQUNSLFlBQVksRUFDWixVQUFVLEVBQ1YsU0FBUyxFQUNULFdBQVcsRUFDWCxTQUFTLEdBQ1YsTUFBTSxjQUFjLENBQUM7QUFDdEIsY0FBYyxzQkFBc0IsQ0FBQztBQUVyQyxPQUFPO0FBQ0wsUUFBUTtBQUNSLGVBQWUsRUFDZixhQUFhLEVBQ2Isc0JBQXNCLEVBQ3RCLHFCQUFxQixFQUNyQixXQUFXLEVBQ1gsWUFBWSxFQUNaLFVBQVUsRUFDVix1QkFBdUIsRUF1Q3ZCLGVBQWUsR0E2Q2hCLE1BQU0sd0JBQXdCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyBJb25CYWNrQnV0dG9uIH0gZnJvbSAnLi9uYXZpZ2F0aW9uL2JhY2stYnV0dG9uJztcbmV4cG9ydCB7IElvbk1vZGFsIH0gZnJvbSAnLi9vdmVybGF5cy9tb2RhbCc7XG5leHBvcnQgeyBJb25Qb3BvdmVyIH0gZnJvbSAnLi9vdmVybGF5cy9wb3BvdmVyJztcbmV4cG9ydCB7IElvblJvdXRlck91dGxldCB9IGZyb20gJy4vbmF2aWdhdGlvbi9yb3V0ZXItb3V0bGV0JztcbmV4cG9ydCB7IElvblJvdXRlckxpbmssIElvblJvdXRlckxpbmtXaXRoSHJlZiB9IGZyb20gJy4vbmF2aWdhdGlvbi9yb3V0ZXItbGluay1kZWxlZ2F0ZSc7XG5leHBvcnQgeyBJb25UYWJzIH0gZnJvbSAnLi9uYXZpZ2F0aW9uL3RhYnMnO1xuZXhwb3J0IHsgcHJvdmlkZUlvbmljQW5ndWxhciB9IGZyb20gJy4vcHJvdmlkZXJzL2lvbmljLWFuZ3VsYXInO1xuZXhwb3J0IHsgQWN0aW9uU2hlZXRDb250cm9sbGVyIH0gZnJvbSAnLi9wcm92aWRlcnMvYWN0aW9uLXNoZWV0LWNvbnRyb2xsZXInO1xuZXhwb3J0IHsgQWxlcnRDb250cm9sbGVyIH0gZnJvbSAnLi9wcm92aWRlcnMvYWxlcnQtY29udHJvbGxlcic7XG5leHBvcnQgeyBBbmltYXRpb25Db250cm9sbGVyIH0gZnJvbSAnLi9wcm92aWRlcnMvYW5pbWF0aW9uLWNvbnRyb2xsZXInO1xuZXhwb3J0IHsgR2VzdHVyZUNvbnRyb2xsZXIgfSBmcm9tICcuL3Byb3ZpZGVycy9nZXN0dXJlLWNvbnRyb2xsZXInO1xuZXhwb3J0IHsgTG9hZGluZ0NvbnRyb2xsZXIgfSBmcm9tICcuL3Byb3ZpZGVycy9sb2FkaW5nLWNvbnRyb2xsZXInO1xuZXhwb3J0IHsgTWVudUNvbnRyb2xsZXIgfSBmcm9tICcuL3Byb3ZpZGVycy9tZW51LWNvbnRyb2xsZXInO1xuZXhwb3J0IHsgTW9kYWxDb250cm9sbGVyIH0gZnJvbSAnLi9wcm92aWRlcnMvbW9kYWwtY29udHJvbGxlcic7XG5leHBvcnQgeyBQaWNrZXJDb250cm9sbGVyIH0gZnJvbSAnLi9wcm92aWRlcnMvcGlja2VyLWNvbnRyb2xsZXInO1xuZXhwb3J0IHsgUG9wb3ZlckNvbnRyb2xsZXIgfSBmcm9tICcuL3Byb3ZpZGVycy9wb3BvdmVyLWNvbnRyb2xsZXInO1xuZXhwb3J0IHsgVG9hc3RDb250cm9sbGVyIH0gZnJvbSAnLi9wcm92aWRlcnMvdG9hc3QtY29udHJvbGxlcic7XG5leHBvcnQge1xuICBEb21Db250cm9sbGVyLFxuICBOYXZDb250cm9sbGVyLFxuICBDb25maWcsXG4gIFBsYXRmb3JtLFxuICBOYXZQYXJhbXMsXG4gIElvbk1vZGFsVG9rZW4sXG4gIElvbmljUm91dGVTdHJhdGVneSxcbiAgVmlld1dpbGxFbnRlcixcbiAgVmlld0RpZEVudGVyLFxuICBWaWV3V2lsbExlYXZlLFxuICBWaWV3RGlkTGVhdmUsXG59IGZyb20gJ0Bpb25pYy9hbmd1bGFyL2NvbW1vbic7XG5leHBvcnQgeyBJb25OYXYgfSBmcm9tICcuL25hdmlnYXRpb24vbmF2JztcbmV4cG9ydCB7XG4gIElvbkNoZWNrYm94LFxuICBJb25EYXRldGltZSxcbiAgSW9uSW5wdXQsXG4gIElvbklucHV0T3RwLFxuICBJb25JY29uLFxuICBJb25SYWRpb0dyb3VwLFxuICBJb25SYW5nZSxcbiAgSW9uU2VhcmNoYmFyLFxuICBJb25TZWdtZW50LFxuICBJb25TZWxlY3QsXG4gIElvblRleHRhcmVhLFxuICBJb25Ub2dnbGUsXG59IGZyb20gJy4vZGlyZWN0aXZlcyc7XG5leHBvcnQgKiBmcm9tICcuL2RpcmVjdGl2ZXMvcHJveGllcyc7XG5cbmV4cG9ydCB7XG4gIC8vIFVUSUxTXG4gIGNyZWF0ZUFuaW1hdGlvbixcbiAgY3JlYXRlR2VzdHVyZSxcbiAgaW9zVHJhbnNpdGlvbkFuaW1hdGlvbixcbiAgbWRUcmFuc2l0aW9uQW5pbWF0aW9uLFxuICBJb25pY1NsaWRlcyxcbiAgZ2V0UGxhdGZvcm1zLFxuICBpc1BsYXRmb3JtLFxuICBnZXRUaW1lR2l2ZW5Qcm9ncmVzc2lvbixcbiAgLy8gVFlQRVNcbiAgQW5pbWF0aW9uLFxuICBBbmltYXRpb25CdWlsZGVyLFxuICBBbmltYXRpb25DYWxsYmFja09wdGlvbnMsXG4gIEFuaW1hdGlvbkRpcmVjdGlvbixcbiAgQW5pbWF0aW9uRmlsbCxcbiAgQW5pbWF0aW9uS2V5RnJhbWVzLFxuICBBbmltYXRpb25MaWZlY3ljbGUsXG4gIEdlc3R1cmUsXG4gIEdlc3R1cmVDb25maWcsXG4gIEdlc3R1cmVEZXRhaWwsXG4gIE5hdkNvbXBvbmVudFdpdGhQcm9wcyxcbiAgU3Bpbm5lclR5cGVzLFxuICBBY2NvcmRpb25Hcm91cEN1c3RvbUV2ZW50LFxuICBBY2NvcmRpb25Hcm91cENoYW5nZUV2ZW50RGV0YWlsLFxuICBCcmVhZGNydW1iQ3VzdG9tRXZlbnQsXG4gIEJyZWFkY3J1bWJDb2xsYXBzZWRDbGlja0V2ZW50RGV0YWlsLFxuICBBY3Rpb25TaGVldE9wdGlvbnMsXG4gIEFjdGlvblNoZWV0QnV0dG9uLFxuICBBbGVydE9wdGlvbnMsXG4gIEFsZXJ0SW5wdXQsXG4gIEFsZXJ0QnV0dG9uLFxuICBCYWNrQnV0dG9uRXZlbnQsXG4gIENoZWNrYm94Q3VzdG9tRXZlbnQsXG4gIENoZWNrYm94Q2hhbmdlRXZlbnREZXRhaWwsXG4gIERhdGV0aW1lQ3VzdG9tRXZlbnQsXG4gIERhdGV0aW1lQ2hhbmdlRXZlbnREZXRhaWwsXG4gIEluZmluaXRlU2Nyb2xsQ3VzdG9tRXZlbnQsXG4gIElucHV0Q3VzdG9tRXZlbnQsXG4gIElucHV0Q2hhbmdlRXZlbnREZXRhaWwsXG4gIElucHV0T3RwQ3VzdG9tRXZlbnQsXG4gIElucHV0T3RwQ2hhbmdlRXZlbnREZXRhaWwsXG4gIElucHV0T3RwQ29tcGxldGVFdmVudERldGFpbCxcbiAgSW5wdXRPdHBJbnB1dEV2ZW50RGV0YWlsLFxuICAvLyBUT0RPKEZXLTY1OTApOiBSZW1vdmUgdGhlIG5leHQgdHdvIGxpbmVzIG9uY2UgdGhlIGRlcHJlY2F0ZWQgZXZlbnQgaXMgcmVtb3ZlZFxuICBJdGVtUmVvcmRlckV2ZW50RGV0YWlsLFxuICBJdGVtUmVvcmRlckN1c3RvbUV2ZW50LFxuICBJdGVtU2xpZGluZ0N1c3RvbUV2ZW50LFxuICBJb25pY1NhZmVTdHJpbmcsXG4gIExvYWRpbmdPcHRpb25zLFxuICBNZW51Q3VzdG9tRXZlbnQsXG4gIE1vZGFsT3B0aW9ucyxcbiAgTmF2Q3VzdG9tRXZlbnQsXG4gIFBpY2tlck9wdGlvbnMsXG4gIFBpY2tlckJ1dHRvbixcbiAgUGlja2VyQ29sdW1uLFxuICBQaWNrZXJDb2x1bW5PcHRpb24sXG4gIFBsYXRmb3JtQ29uZmlnLFxuICBQb3BvdmVyT3B0aW9ucyxcbiAgUmFkaW9Hcm91cEN1c3RvbUV2ZW50LFxuICBSYWRpb0dyb3VwQ2hhbmdlRXZlbnREZXRhaWwsXG4gIFJhbmdlQ3VzdG9tRXZlbnQsXG4gIFJhbmdlQ2hhbmdlRXZlbnREZXRhaWwsXG4gIFJhbmdlS25vYk1vdmVTdGFydEV2ZW50RGV0YWlsLFxuICBSYW5nZUtub2JNb3ZlRW5kRXZlbnREZXRhaWwsXG4gIFJlZnJlc2hlckN1c3RvbUV2ZW50LFxuICBSZWZyZXNoZXJFdmVudERldGFpbCxcbiAgUmVvcmRlck1vdmVDdXN0b21FdmVudCxcbiAgUmVvcmRlck1vdmVFdmVudERldGFpbCxcbiAgUmVvcmRlckVuZEN1c3RvbUV2ZW50LFxuICBSZW9yZGVyRW5kRXZlbnREZXRhaWwsXG4gIFJvdXRlckV2ZW50RGV0YWlsLFxuICBSb3V0ZXJDdXN0b21FdmVudCxcbiAgU2Nyb2xsQmFzZUN1c3RvbUV2ZW50LFxuICBTY3JvbGxCYXNlRGV0YWlsLFxuICBTY3JvbGxEZXRhaWwsXG4gIFNjcm9sbEN1c3RvbUV2ZW50LFxuICBTZWFyY2hiYXJDdXN0b21FdmVudCxcbiAgU2VhcmNoYmFyQ2hhbmdlRXZlbnREZXRhaWwsXG4gIFNlYXJjaGJhcklucHV0RXZlbnREZXRhaWwsXG4gIFNlZ21lbnRDaGFuZ2VFdmVudERldGFpbCxcbiAgU2VnbWVudEN1c3RvbUV2ZW50LFxuICBTZWdtZW50VmFsdWUsXG4gIFNlbGVjdENoYW5nZUV2ZW50RGV0YWlsLFxuICBTZWxlY3RDdXN0b21FdmVudCxcbiAgVGFic0N1c3RvbUV2ZW50LFxuICBUZXh0YXJlYUNoYW5nZUV2ZW50RGV0YWlsLFxuICBUZXh0YXJlYUN1c3RvbUV2ZW50LFxuICBUb2FzdE9wdGlvbnMsXG4gIFRvYXN0QnV0dG9uLFxuICBUb2FzdExheW91dCxcbiAgVG9nZ2xlQ2hhbmdlRXZlbnREZXRhaWwsXG4gIFRvZ2dsZUN1c3RvbUV2ZW50LFxufSBmcm9tICdAaW9uaWMvY29yZS9jb21wb25lbnRzJztcbiJdfQ==